# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    
    def isCousins(self, root, x, y):
        """
        :type root: TreeNode
        :type x: int
        :type y: int
        :rtype: bool
        """
        //working solution
        
        def dfs(root,value,depth,parent):
            if not root : return
            
            if root.val == value:
                global depth_res
                global parent_res
                depth_res = depth
                parent_res = parent
                print(depth,parent)
                return
            else:
                dfs(root.left,value,depth+1,root.val)
                dfs(root.right,value,depth+1,root.val)
        
        dfs(root,x,0,0)
        
        x_depth = depth_res
        x_parent = parent_res
        print(x_depth,x_parent)
        dfs(root,y,0,0)
        print(x_depth,x_parent)
        
        if x_depth == depth_res and x_parent != parent_res:
            return True
        else:
            return False
        
        //Returning unknown error nut worked for my inputs
#         def isSibling(root,a,b):
#             if root==None:
#                 return 0
#             return ((root.left == a and root.right ==b) or 
#             (root.left == b and root.right == a)or
#             isSibling(root.left, a, b) or
#             isSibling(root.right, a, b)) 
        
#         def level(root,ptr,lev):
#             if root==None:
#                 return 0
#             if root==ptr:
#                 return lev
#             l = level(root.left,ptr,lev+1)
#             if l!=0:
#                 return l
#             return level(root.right,ptr,lev+1)
        
#         if (level(root,x,0)==level(root,y,0)) and not(isSibling(root,x,y)):
#             return True
#         else:
#             return False

          



            
                
        
    
        
        
        
        
